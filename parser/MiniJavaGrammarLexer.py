# Generated from MiniJavaGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,456,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
        24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
        30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,
        36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,318,8,40,1,41,1,41,1,
        42,1,42,5,42,324,8,42,10,42,12,42,327,9,42,1,43,4,43,330,8,43,11,
        43,12,43,331,1,43,1,43,1,44,1,44,1,44,1,44,5,44,340,8,44,10,44,12,
        44,343,9,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,354,
        8,45,10,45,12,45,357,9,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,5,46,
        366,8,46,10,46,12,46,369,9,46,1,46,1,46,1,47,1,47,1,47,3,47,376,
        8,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,3,51,388,
        8,51,1,52,1,52,1,53,1,53,1,53,3,53,395,8,53,1,53,1,53,1,53,3,53,
        400,8,53,3,53,402,8,53,1,54,1,54,3,54,406,8,54,1,54,3,54,409,8,54,
        1,55,1,55,3,55,413,8,55,1,56,1,56,1,57,4,57,418,8,57,11,57,12,57,
        419,1,58,1,58,3,58,424,8,58,1,59,4,59,427,8,59,11,59,12,59,428,1,
        60,1,60,1,61,1,61,1,61,1,61,3,61,437,8,61,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,3,62,448,8,62,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,2,341,355,0,64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,0,101,0,103,0,105,0,107,
        0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,1,
        0,9,3,0,9,10,13,13,32,32,2,0,34,34,92,92,2,0,39,39,92,92,4,0,36,
        36,65,90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,2,0,76,
        76,108,108,1,0,49,57,3,0,48,57,65,70,97,102,8,0,34,34,39,39,92,92,
        98,98,102,102,110,110,114,114,116,116,462,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
        0,95,1,0,0,0,0,97,1,0,0,0,1,129,1,0,0,0,3,135,1,0,0,0,5,137,1,0,
        0,0,7,139,1,0,0,0,9,146,1,0,0,0,11,153,1,0,0,0,13,158,1,0,0,0,15,
        163,1,0,0,0,17,170,1,0,0,0,19,174,1,0,0,0,21,176,1,0,0,0,23,180,
        1,0,0,0,25,188,1,0,0,0,27,193,1,0,0,0,29,196,1,0,0,0,31,202,1,0,
        0,0,33,208,1,0,0,0,35,217,1,0,0,0,37,236,1,0,0,0,39,239,1,0,0,0,
        41,244,1,0,0,0,43,252,1,0,0,0,45,260,1,0,0,0,47,262,1,0,0,0,49,266,
        1,0,0,0,51,271,1,0,0,0,53,273,1,0,0,0,55,276,1,0,0,0,57,278,1,0,
        0,0,59,281,1,0,0,0,61,283,1,0,0,0,63,285,1,0,0,0,65,287,1,0,0,0,
        67,289,1,0,0,0,69,291,1,0,0,0,71,293,1,0,0,0,73,295,1,0,0,0,75,297,
        1,0,0,0,77,299,1,0,0,0,79,306,1,0,0,0,81,317,1,0,0,0,83,319,1,0,
        0,0,85,321,1,0,0,0,87,329,1,0,0,0,89,335,1,0,0,0,91,349,1,0,0,0,
        93,362,1,0,0,0,95,372,1,0,0,0,97,379,1,0,0,0,99,381,1,0,0,0,101,
        383,1,0,0,0,103,385,1,0,0,0,105,389,1,0,0,0,107,401,1,0,0,0,109,
        403,1,0,0,0,111,412,1,0,0,0,113,414,1,0,0,0,115,417,1,0,0,0,117,
        423,1,0,0,0,119,426,1,0,0,0,121,430,1,0,0,0,123,436,1,0,0,0,125,
        447,1,0,0,0,127,449,1,0,0,0,129,130,5,99,0,0,130,131,5,108,0,0,131,
        132,5,97,0,0,132,133,5,115,0,0,133,134,5,115,0,0,134,2,1,0,0,0,135,
        136,5,123,0,0,136,4,1,0,0,0,137,138,5,125,0,0,138,6,1,0,0,0,139,
        140,5,112,0,0,140,141,5,117,0,0,141,142,5,98,0,0,142,143,5,108,0,
        0,143,144,5,105,0,0,144,145,5,99,0,0,145,8,1,0,0,0,146,147,5,115,
        0,0,147,148,5,116,0,0,148,149,5,97,0,0,149,150,5,116,0,0,150,151,
        5,105,0,0,151,152,5,99,0,0,152,10,1,0,0,0,153,154,5,118,0,0,154,
        155,5,111,0,0,155,156,5,105,0,0,156,157,5,100,0,0,157,12,1,0,0,0,
        158,159,5,109,0,0,159,160,5,97,0,0,160,161,5,105,0,0,161,162,5,110,
        0,0,162,14,1,0,0,0,163,164,5,83,0,0,164,165,5,116,0,0,165,166,5,
        114,0,0,166,167,5,105,0,0,167,168,5,110,0,0,168,169,5,103,0,0,169,
        16,1,0,0,0,170,171,5,46,0,0,171,172,5,46,0,0,172,173,5,46,0,0,173,
        18,1,0,0,0,174,175,5,44,0,0,175,20,1,0,0,0,176,177,5,105,0,0,177,
        178,5,110,0,0,178,179,5,116,0,0,179,22,1,0,0,0,180,181,5,98,0,0,
        181,182,5,111,0,0,182,183,5,111,0,0,183,184,5,108,0,0,184,185,5,
        101,0,0,185,186,5,97,0,0,186,187,5,110,0,0,187,24,1,0,0,0,188,189,
        5,99,0,0,189,190,5,104,0,0,190,191,5,97,0,0,191,192,5,114,0,0,192,
        26,1,0,0,0,193,194,5,100,0,0,194,195,5,111,0,0,195,28,1,0,0,0,196,
        197,5,119,0,0,197,198,5,104,0,0,198,199,5,105,0,0,199,200,5,108,
        0,0,200,201,5,101,0,0,201,30,1,0,0,0,202,203,5,98,0,0,203,204,5,
        114,0,0,204,205,5,101,0,0,205,206,5,97,0,0,206,207,5,107,0,0,207,
        32,1,0,0,0,208,209,5,99,0,0,209,210,5,111,0,0,210,211,5,110,0,0,
        211,212,5,116,0,0,212,213,5,105,0,0,213,214,5,110,0,0,214,215,5,
        117,0,0,215,216,5,101,0,0,216,34,1,0,0,0,217,218,5,83,0,0,218,219,
        5,121,0,0,219,220,5,115,0,0,220,221,5,116,0,0,221,222,5,101,0,0,
        222,223,5,109,0,0,223,224,5,46,0,0,224,225,5,111,0,0,225,226,5,117,
        0,0,226,227,5,116,0,0,227,228,5,46,0,0,228,229,5,112,0,0,229,230,
        5,114,0,0,230,231,5,105,0,0,231,232,5,110,0,0,232,233,5,116,0,0,
        233,234,5,108,0,0,234,235,5,110,0,0,235,36,1,0,0,0,236,237,5,105,
        0,0,237,238,5,102,0,0,238,38,1,0,0,0,239,240,5,101,0,0,240,241,5,
        108,0,0,241,242,5,115,0,0,242,243,5,101,0,0,243,40,1,0,0,0,244,245,
        5,46,0,0,245,246,5,108,0,0,246,247,5,101,0,0,247,248,5,110,0,0,248,
        249,5,103,0,0,249,250,5,116,0,0,250,251,5,104,0,0,251,42,1,0,0,0,
        252,253,5,46,0,0,253,254,5,99,0,0,254,255,5,104,0,0,255,256,5,97,
        0,0,256,257,5,114,0,0,257,258,5,65,0,0,258,259,5,116,0,0,259,44,
        1,0,0,0,260,261,5,46,0,0,261,46,1,0,0,0,262,263,5,110,0,0,263,264,
        5,101,0,0,264,265,5,119,0,0,265,48,1,0,0,0,266,267,5,116,0,0,267,
        268,5,104,0,0,268,269,5,105,0,0,269,270,5,115,0,0,270,50,1,0,0,0,
        271,272,5,47,0,0,272,52,1,0,0,0,273,274,5,124,0,0,274,275,5,124,
        0,0,275,54,1,0,0,0,276,277,5,62,0,0,277,56,1,0,0,0,278,279,5,38,
        0,0,279,280,5,38,0,0,280,58,1,0,0,0,281,282,5,60,0,0,282,60,1,0,
        0,0,283,284,5,43,0,0,284,62,1,0,0,0,285,286,5,45,0,0,286,64,1,0,
        0,0,287,288,5,42,0,0,288,66,1,0,0,0,289,290,5,33,0,0,290,68,1,0,
        0,0,291,292,5,91,0,0,292,70,1,0,0,0,293,294,5,93,0,0,294,72,1,0,
        0,0,295,296,5,40,0,0,296,74,1,0,0,0,297,298,5,41,0,0,298,76,1,0,
        0,0,299,300,5,114,0,0,300,301,5,101,0,0,301,302,5,116,0,0,302,303,
        5,117,0,0,303,304,5,114,0,0,304,305,5,110,0,0,305,78,1,0,0,0,306,
        307,5,61,0,0,307,80,1,0,0,0,308,309,5,116,0,0,309,310,5,114,0,0,
        310,311,5,117,0,0,311,318,5,101,0,0,312,313,5,102,0,0,313,314,5,
        97,0,0,314,315,5,108,0,0,315,316,5,115,0,0,316,318,5,101,0,0,317,
        308,1,0,0,0,317,312,1,0,0,0,318,82,1,0,0,0,319,320,5,59,0,0,320,
        84,1,0,0,0,321,325,3,99,49,0,322,324,3,101,50,0,323,322,1,0,0,0,
        324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,86,1,0,0,0,327,
        325,1,0,0,0,328,330,7,0,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,
        329,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,6,43,0,0,334,
        88,1,0,0,0,335,336,5,47,0,0,336,337,5,42,0,0,337,341,1,0,0,0,338,
        340,9,0,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,342,1,0,0,0,341,
        339,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,5,42,0,0,345,
        346,5,47,0,0,346,347,1,0,0,0,347,348,6,44,0,0,348,90,1,0,0,0,349,
        350,5,47,0,0,350,351,5,47,0,0,351,355,1,0,0,0,352,354,9,0,0,0,353,
        352,1,0,0,0,354,357,1,0,0,0,355,356,1,0,0,0,355,353,1,0,0,0,356,
        358,1,0,0,0,357,355,1,0,0,0,358,359,5,10,0,0,359,360,1,0,0,0,360,
        361,6,45,0,0,361,92,1,0,0,0,362,367,5,34,0,0,363,366,3,123,61,0,
        364,366,8,1,0,0,365,363,1,0,0,0,365,364,1,0,0,0,366,369,1,0,0,0,
        367,365,1,0,0,0,367,368,1,0,0,0,368,370,1,0,0,0,369,367,1,0,0,0,
        370,371,5,34,0,0,371,94,1,0,0,0,372,375,5,39,0,0,373,376,3,123,61,
        0,374,376,8,2,0,0,375,373,1,0,0,0,375,374,1,0,0,0,376,377,1,0,0,
        0,377,378,5,39,0,0,378,96,1,0,0,0,379,380,3,103,51,0,380,98,1,0,
        0,0,381,382,7,3,0,0,382,100,1,0,0,0,383,384,7,4,0,0,384,102,1,0,
        0,0,385,387,3,107,53,0,386,388,3,105,52,0,387,386,1,0,0,0,387,388,
        1,0,0,0,388,104,1,0,0,0,389,390,7,5,0,0,390,106,1,0,0,0,391,402,
        5,48,0,0,392,399,3,113,56,0,393,395,3,109,54,0,394,393,1,0,0,0,394,
        395,1,0,0,0,395,400,1,0,0,0,396,397,3,119,59,0,397,398,3,109,54,
        0,398,400,1,0,0,0,399,394,1,0,0,0,399,396,1,0,0,0,400,402,1,0,0,
        0,401,391,1,0,0,0,401,392,1,0,0,0,402,108,1,0,0,0,403,408,3,111,
        55,0,404,406,3,115,57,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,
        1,0,0,0,407,409,3,111,55,0,408,405,1,0,0,0,408,409,1,0,0,0,409,110,
        1,0,0,0,410,413,5,48,0,0,411,413,3,113,56,0,412,410,1,0,0,0,412,
        411,1,0,0,0,413,112,1,0,0,0,414,415,7,6,0,0,415,114,1,0,0,0,416,
        418,3,117,58,0,417,416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,0,0,419,
        420,1,0,0,0,420,116,1,0,0,0,421,424,3,111,55,0,422,424,5,95,0,0,
        423,421,1,0,0,0,423,422,1,0,0,0,424,118,1,0,0,0,425,427,5,95,0,0,
        426,425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,
        429,120,1,0,0,0,430,431,7,7,0,0,431,122,1,0,0,0,432,433,5,92,0,0,
        433,437,7,8,0,0,434,437,3,127,63,0,435,437,3,125,62,0,436,432,1,
        0,0,0,436,434,1,0,0,0,436,435,1,0,0,0,437,124,1,0,0,0,438,439,5,
        92,0,0,439,440,2,48,51,0,440,441,2,48,55,0,441,448,2,48,55,0,442,
        443,5,92,0,0,443,444,2,48,55,0,444,448,2,48,55,0,445,446,5,92,0,
        0,446,448,2,48,55,0,447,438,1,0,0,0,447,442,1,0,0,0,447,445,1,0,
        0,0,448,126,1,0,0,0,449,450,5,92,0,0,450,451,5,117,0,0,451,452,3,
        121,60,0,452,453,3,121,60,0,453,454,3,121,60,0,454,455,3,121,60,
        0,455,128,1,0,0,0,21,0,317,325,331,341,355,365,367,375,387,394,399,
        401,405,408,412,419,423,428,436,447,1,6,0,0
    ]

class MiniJavaGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    DIV = 26
    OR = 27
    GT = 28
    AND = 29
    LT = 30
    PLUS = 31
    MINUS = 32
    TIMES = 33
    NOT = 34
    LSB = 35
    RSB = 36
    LP = 37
    RP = 38
    RETURN = 39
    EQ = 40
    BooleanLiteral = 41
    SC = 42
    Identifier = 43
    WS = 44
    MULTILINE_COMMENT = 45
    LINE_COMMENT = 46
    STRING = 47
    CHAR = 48
    IntegerLiteral = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'}'", "'public'", "'static'", "'void'", "'main'", 
            "'String'", "'...'", "','", "'int'", "'boolean'", "'char'", 
            "'do'", "'while'", "'break'", "'continue'", "'System.out.println'", 
            "'if'", "'else'", "'.length'", "'.charAt'", "'.'", "'new'", 
            "'this'", "'/'", "'||'", "'>'", "'&&'", "'<'", "'+'", "'-'", 
            "'*'", "'!'", "'['", "']'", "'('", "')'", "'return'", "'='", 
            "';'" ]

    symbolicNames = [ "<INVALID>",
            "DIV", "OR", "GT", "AND", "LT", "PLUS", "MINUS", "TIMES", "NOT", 
            "LSB", "RSB", "LP", "RP", "RETURN", "EQ", "BooleanLiteral", 
            "SC", "Identifier", "WS", "MULTILINE_COMMENT", "LINE_COMMENT", 
            "STRING", "CHAR", "IntegerLiteral" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "DIV", "OR", 
                  "GT", "AND", "LT", "PLUS", "MINUS", "TIMES", "NOT", "LSB", 
                  "RSB", "LP", "RP", "RETURN", "EQ", "BooleanLiteral", "SC", 
                  "Identifier", "WS", "MULTILINE_COMMENT", "LINE_COMMENT", 
                  "STRING", "CHAR", "IntegerLiteral", "JavaLetter", "JavaLetterOrDigit", 
                  "DecimalIntegerLiteral", "IntegertypeSuffix", "DecimalNumeral", 
                  "Digits", "Digit", "NonZeroDigit", "DigitsAndUnderscores", 
                  "DigitOrUnderscore", "Underscores", "HEX_DIGIT", "ESC_SEQ", 
                  "OCTAL_ESC", "UNICODE_ESC" ]

    grammarFileName = "MiniJavaGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


